/**
 * üèóÔ∏è INTERFACES TYPESCRIPT - TIPAGEM RIGOROSA
 *
 * Este arquivo demonstra TypeScript rigoroso com interfaces completas
 * para todas as entidades da aplica√ß√£o.
 *
 * REQUISITOS T√âCNICOS ATENDIDOS:
 * ‚úÖ Tipagem rigorosa habilitada (strict: true)
 * ‚úÖ Interfaces para todas as entidades
 * ‚úÖ Union types para valores espec√≠ficos
 * ‚úÖ Props e estados tipados
 * ‚úÖ M√©todos de API tipados
 */

/**
 * üé≠ Interface principal para m√≥dulos de dan√ßa
 * Representa um curso completo com metadados e v√≠deos
 */
export interface DanceModule {
  id: string;                    // Identificador √∫nico
  title: string;                 // Nome do m√≥dulo (ex: "Ballet Cl√°ssico")
  level: 'iniciante' | 'intermediario' | 'avancado'; // N√≠vel de dificuldade
  style: string;                 // Estilo de dan√ßa (ex: "Ballet", "Hip Hop")
  videoCount: number;            // Quantidade total de v√≠deos
  duration: number;              // Dura√ß√£o total em segundos
  instructor: string;            // Nome do instrutor
  description: string;           // Descri√ß√£o detalhada do m√≥dulo
  thumbnailUrl: string;          // URL da imagem de capa
  videos: DanceVideo[];          // Array de v√≠deos do m√≥dulo
}

/**
 * üé• Interface para v√≠deos individuais de dan√ßa
 * Cada v√≠deo pertence a um m√≥dulo espec√≠fico
 */
export interface DanceVideo {
  id: string;                    // Identificador √∫nico do v√≠deo
  moduleId: string;              // ID do m√≥dulo pai
  title: string;                 // T√≠tulo da aula (ex: "Posi√ß√µes B√°sicas")
  videoUrl: string;              // URL do arquivo de v√≠deo
  duration: number;              // Dura√ß√£o em segundos
  order: number;                 // Ordem dentro do m√≥dulo (1, 2, 3...)
  description: string;           // Descri√ß√£o da aula
  thumbnailUrl: string;          // URL da thumbnail do v√≠deo
  level: 'iniciante' | 'intermediario' | 'avancado'; // N√≠vel espec√≠fico
}

/**
 * üìä Interface para progresso do usu√°rio
 * Armazena o avan√ßo do usu√°rio em cada m√≥dulo
 */
export interface UserProgress {
  moduleId: string;              // ID do m√≥dulo
  completedVideos: string[];     // Array de IDs de v√≠deos completados
  progressPercentage: number;    // Percentual de conclus√£o (0-100)
  lastAccessed: Date;            // √öltimo acesso ao m√≥dulo
  totalTimeWatched: number;      // Tempo total assistido em minutos
}

/**
 * üéØ Interface para estado global da aplica√ß√£o
 * Gerencia todos os dados e estados da app
 */
export interface AppState {
  modules: DanceModule[];        // Lista de todos os m√≥dulos
  userProgress: UserProgress[];  // Progresso do usu√°rio
  isLoading: boolean;            // Estado de carregamento
  error: string | null;          // Mensagem de erro (se houver)
  searchQuery: string;           // Termo de busca atual
  selectedLevel: 'todos' | 'iniciante' | 'intermediario' | 'avancado'; // Filtro de n√≠vel
}

/**
 * üéÆ Interface para controle do player de v√≠deo
 * Define m√©todos obrigat√≥rios para controle via useRef
 */
export interface VideoPlayerRef {
  play: () => void;                        // Reproduzir v√≠deo
  pause: () => void;                       // Pausar v√≠deo
  seekTo: (seconds: number) => void;       // Navegar para posi√ß√£o espec√≠fica
  getCurrentTime: () => Promise<number>;   // Obter tempo atual
  setVolume: (volume: number) => void;     // Ajustar volume (0-1)
}

/**
 * ‚è≥ Interface para estados de carregamento
 * Usado em opera√ß√µes ass√≠ncronas
 */
export interface LoadingState {
  isLoading: boolean;            // Se est√° carregando
  error: string | null;          // Mensagem de erro
}